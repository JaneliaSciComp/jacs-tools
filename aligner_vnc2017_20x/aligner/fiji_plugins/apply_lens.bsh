/**
 * License: GPL
 *
 * This program is free software; you can redistribute it and/or
 * modify it under the terms of the GNU General Public License 2
 * as published by the Free Software Foundation.
 *
 * This program is distributed in the hope that it will be useful,
 * but WITHOUT ANY WARRANTY; without even the implied warranty of
 * MERCHANTABILITY or FITNESS FOR A PARTICULAR PURPOSE.  See the
 * GNU General Public License for more details.
 *
 * You should have received a copy of the GNU General Public License
 * along with this program; if not, write to the Free Software
 * Foundation, Inc., 59 Temple Place - Suite 330, Boston, MA  02111-1307, USA.
 */

/**
 * Apply wavelength dependent lens correction to multi-channel input that is
 * either lsm or tif, several files possible.  Save as single multi-channel tif.
 *
 * @author Stephan Saalfeld <saalfelds@janelia.hhmi.org>
 */

import com.google.gson.Gson;
import com.google.gson.GsonBuilder;

import java.awt.Rectangle;

import java.io.File;
import java.io.FileReader;
import java.io.IOException;
import java.util.ArrayList;
import java.util.*;

import org.apache.commons.lang.ArrayUtils;
import org.imagearchive.lsm.reader.Reader;

import ij.plugin.*;
import ij.plugin.PlugIn;
import java.awt.*;
import java.io.*;
import ij.*;
import ij.io.*;
import ij.process.StackConverter;
import ij.gui.*;


import fiji.util.gui.GenericDialogPlus;
import ij.IJ;
import ij.CompositeImage;
import ij.ImagePlus;
import ij.ImageStack;
import ij.io.*;
import ij.io.Opener;
import ij.process.Blitter;
import ij.process.ImageProcessor;
import mpicbg.ij.TransformMeshMapping;
import mpicbg.models.CoordinateTransformMesh;
import mpicbg.models.CoordinateTransform;
import mpicbg.models.CoordinateTransformList;
import mpicbg.trakem2.transform.AffineModel2D;
import mpicbg.trakem2.transform.NonLinearCoordinateTransform;


class Parameters {
	String imageFilePaths =""; // new String[]{"", ""};
	String transformsFilePath = "";
	String outFilePath = "";
	int cropWidth = 0;
	int Step = 1;
}

class Transform {
	String className;
	String dataString;
}

class TransformExport {
	String name;
	Transform[] transform;
}

CoordinateTransformList createCoordinateTransform(Transform[] transforms) {
	CoordinateTransformList ctl = new CoordinateTransformList();
	for (Transform t : transforms) {
		Class clazz = Class.forName(t.className);
		mpicbg.trakem2.transform.CoordinateTransform ct = (mpicbg.trakem2.transform.CoordinateTransform)clazz.newInstance();
		ct.init(t.dataString);
		ctl.add(ct);
	}
	return ctl;
}

ImagePlus openImagePlus(String path) {
	ImagePlus imp;
	if (path.endsWith(".tif"))
	imp = new Opener().openImage(path);
	else if (path.endsWith(".lsm"))
	imp = new Reader().open(path);
	else if (path.endsWith(".zip"))
	imp = new Opener().openImage(path);
	else
	imp = null;
	return imp;
}

ImagePlus[] splitChannels(ImagePlus imp) {
	int nChannels = imp.getNChannels();
	int nSlices = imp.getNSlices();
	ImageStack stack = imp.getStack();
	ImagePlus[] channels = new ImagePlus[nChannels];
	for (int c = 0; c < nChannels; ++c) {
		ImageStack channelStack = new ImageStack(imp.getWidth(), imp.getHeight());
		
		for (int s = 0; s < nSlices; ++s)
		channelStack.addSlice(stack.getProcessor(imp.getStackIndex(c + 1, s + 1, 1)));
		
		channelImp = new ImagePlus(imp.getTitle() + "-" + c, channelStack);
		channelImp.setCalibration(imp.getCalibration());
		channelImp.setDimensions(1, nSlices, 1);
		channels[c] = channelImp;
	}
	
	return channels;
}

ImagePlus combineChannels(ImagePlus[] channels3, int startchannel, int endchannel) {
	
	IJ.log("combineChannels; start"+String.valueOf(startchannel)+"   end; "+String.valueOf(endchannel));
	ImageStack stack = new ImageStack(channels3[0].getWidth(), channels3[0].getHeight());
	int nSlices = channels3[0].getNSlices();
	for (int s = 0; s < nSlices; ++s)
	for (int c = startchannel; c < endchannel; ++c)
	stack.addSlice(channels3[c].getStack().getProcessor(s + 1));
	
	int channelsize= endchannel-startchannel;
	
	ImagePlus imp = new ImagePlus(channels3[0].getTitle().replaceAll("\\.[^.]*$", "-1-" + endchannel), stack);
	
	for (int c2 = startchannel; c2 < endchannel; ++c2)
	imp.setCalibration(channels3[c2].getCalibration());
	
	imp.setDimensions(channelsize, nSlices, 1);
	return imp;
}

ImageStack createTransformedStack(
	ImageStack srcStack,
	CoordinateTransform t,
	int cropWidth,
int meshResolution) {
	CoordinateTransformMesh mesh = new CoordinateTransformMesh(t, meshResolution, srcStack.getWidth(), srcStack.getHeight());
	ImageStack stack = new ImageStack(srcStack.getWidth() - 2 * cropWidth, srcStack.getHeight() - 2 * cropWidth);
	TransformMeshMapping mapping = new TransformMeshMapping(mesh);
	for (int i = 0; i < srcStack.getSize(); ++i) {
		ImageProcessor src = srcStack.getProcessor(i + 1);
		src.setInterpolationMethod(ImageProcessor.BILINEAR);
		ImageProcessor dst = src.createProcessor(srcStack.getWidth(), srcStack.getHeight());
		mapping.mapInterpolated(src, dst);
		ImageProcessor cropped = dst.createProcessor(stack.getWidth(), stack.getHeight());
		cropped.copyBits(dst, -cropWidth, -cropWidth, Blitter.COPY);
		stack.addSlice(cropped);
	}
	return stack;
}

ImageStack createTransformedStack(
	ImageStack srcStack,
	CoordinateTransform t,
int cropWidth) {
	return createTransformedStack(srcStack, t, cropWidth, 128);
}

void setup(Parameters p) {
	GenericDialogPlus gd = new GenericDialogPlus("Apply Lens Correction");
	gd.addFileField("Stack1 : ", p.imageFilePaths);
	gd.addFileField("Transformations: ", p.transformsFilePath);
	gd.addDirectoryField("Output: ", p.outFilePath);
	gd.addNumericField("Crop_width: ", p.cropWidth, 0);
	gd.addNumericField("MIP_Step_slices: ", p.Step, 0);
	gd.showDialog();
	if (!gd.wasCanceled()) {
		p.imageFilePaths = gd.getNextString();
		p.transformsFilePath = gd.getNextString();
		p.outFilePath = gd.getNextString();
		p.cropWidth = (int)gd.getNextNumber();
		p.Step = (int)gd.getNextNumber();
	}
}

ImagePlus zresizeMIP (ImageStack st1, int chnum, ImagePlus[] channels, int Step) {
	
	ImageProcessor ip1 = channels[chnum].getProcessor(); //Mask
	int slicenumber = channels[chnum].getStackSize();
	//	slicenumber=slicenumber/channels.length;
	IJ.log("slicenumber"+String.valueOf(slicenumber)+"   Step; "+String.valueOf(Step));
	
	int sumpx = ip1.getPixelCount();
	int width = channels[chnum].getWidth();
	int height = channels[chnum].getHeight();
	//	ImageStack st1 = channels[chnum].getStack();
	ImageStack dcStack = new ImageStack (width,height);
	
	ip1 = st1.getProcessor(1);// data
	//	String Label =st1.getSliceLabel(1);
	dcStack.addSlice(ip1);
	
	if(IJ.escapePressed())
	return;
	
	
	//	IJ.showProgress(0.0);
	
	int StepSlice=1, StepIncri=0;
	ImageProcessor ip3 = dcStack.getProcessor(StepSlice);
	
	for (int islice=1; islice<=slicenumber ; islice++){
		if(IJ.escapePressed())
		return;
		
		StepIncri=StepIncri+1;
		if(StepIncri==Step+1){
			StepIncri=1;
			StepSlice=StepSlice+1;
			//	Label =st1.getSliceLabel(islice);
			ip1 = st1.getProcessor(islice);
			dcStack.addSlice(ip1);
			ip3 = dcStack.getProcessor(StepSlice);
		}
		
		IJ.showStatus("MIP & Z-resize "+String.valueOf(islice)+"  StepSlice; "+String.valueOf(StepSlice));
		//		IJ.showProgress((double)islice/(double)slicenumber);
		
		if(StepIncri!=1){
			ip1 = st1.getProcessor(islice);// data
			
			for(int OriSig=0; OriSig<sumpx; OriSig++){
				int pix1= ip1.get(OriSig);//Original signal
				int pix2= ip3.get(OriSig);// data
				
				if(pix1>pix2)
				ip3.set(OriSig,pix1);
				//		IJ.log("Added");
				
			}
		}//if(StepIncri!=1){
	}//for (int islice=StartSli; islice<=EndSli ; islice++){
	
	ImagePlus newimp = new ImagePlus(channels[chnum].getTitle(), dcStack);
	newimp.setCalibration(channels[chnum].getCalibration());
	//imp.setDimensions(channelsize, nSlices, 1);
	
	int slicenumberDC = dcStack.getSize();
	IJ.log("slicenumberDC"+String.valueOf(slicenumberDC));
	return newimp;
	//newimp.show();
} //public void run(ImageProcessor ip){

/**
 * Open a list of images, that each contain one or more channels as an array of single channel images.
 * Original order of channels is preserved.
 */
ImagePlus[] openChannels(String filePath) {
	//	ImagePlus[] channels = new ImagePlus[0];
	
	ImagePlus imp = openImagePlus(filePath);
	IJ.log("filePath; "+filePath );
	
	//	IJ.saveAsTiff(imp, OUTfilePaths + "/" + "_2Original.tif");
	
	//	if (imp != null)
	//	channels = ArrayUtils.addAll(channels, splitChannels(imp));
	
	return imp;
}

void main() {
	Parameters p = new Parameters();
	setup(p);
	//	ImagePlus [] channels = openChannels(p.imageFilePaths);
	
	ImagePlus imp = openImagePlus(p.imageFilePaths);
	int nChannels = imp.getNChannels();
	
	ImagePlus[] channels = new ImagePlus[nChannels];
	channels = splitChannels(imp);
	
	
	IJ.log("filePath; "+p.imageFilePaths );
	
	Gson gson = new GsonBuilder().setPrettyPrinting().create();
	TransformExport[] transformExports = gson.fromJson(new FileReader(p.transformsFilePath), TransformExport[].class);
	
	int startchannel=0; int endchannel=0; 
	int endimage=0; int StartJson=0; int EndJson=0;
	
	
	IJ.log("291 here; nChannels; "+String.valueOf(nChannels));
	
	if(nChannels==2){
		StartJson=0; EndJson=2; endimage=1; startchannel=0; endchannel=2;
		IJ.log("Channel length 2");
	}else if(nChannels==3){
		StartJson=2; EndJson=5; endimage=1; startchannel=0; endchannel=3;
		IJ.log("Channel length 3");
		IJ.log("298 here");
	}
	
	
	ImagePlus[] channels2 = new ImagePlus[nChannels];
	int transChannel=0;
	int usePlugin=1;
	IJ.log("Transformation begin");
	
	for (int i = StartJson; i < EndJson; ++i) {
		CoordinateTransform ct = createCoordinateTransform(transformExports[i].transform);
		ImageStack transformedStack = createTransformedStack(channels[transChannel].getStack(), ct, p.cropWidth);
		channels[transChannel].setStack(transformedStack);
		
		if(usePlugin==0)
		channels2[transChannel] = zresizeMIP (channels[transChannel].getStack(),transChannel,channels,p.Step);
		
		//int slicenumberMIP = MIPStack.getSize();
		//IJ.log("slicenumberMIP"+String.valueOf(slicenumberMIP));
		
		transChannel=transChannel+1;
	}
	IJ.log("Transformation finished, step size; " +String.valueOf(p.Step));

		
		ImagePlus impCombined;
		if(usePlugin==1 && p.Step!=1){
			impCombined0 = combineChannels(channels, startchannel, endchannel);
			
			
			IJ.run(impCombined0, "Resize Z MIP", "mip="+p.Step+"");
			impCombined=WindowManager.getCurrentImage();
		}else
		impCombined = combineChannels(channels, startchannel, endchannel);
		
		
		File f = new File(p.outFilePath);
		if (f == null || !(f.mkdirs() || f.exists())) return;
		int SaveTif=1;
		if(SaveTif==1){
			
			IJ.saveAsTiff(new CompositeImage(impCombined), p.outFilePath + "/" + impCombined.getTitle()+".tif");
		}else{
			//	IJ.saveAsTiff(new CompositeImage(impCombined), p.outFilePath + "/" + impCombined.getTitle() +"_"+ifile+".tif");
			new FileSaver (new CompositeImage(impCombined)).saveAsZip(p.outFilePath + "/" + impCombined.getTitle() +".zip");
		}
	
}

main();